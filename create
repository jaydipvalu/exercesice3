For more complex cases, there are various methods for resolving them. There are also Git GUI apps that can help by visualizing the differences.

To fix conflicts locally, you can use the following method:

Open the terminal and checkout your feature branch, for example, my-feature-branch:
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
Open the  file2   in  a code editor of your pre.
<<<<<<< HEAD
>>>>>>> 342c5d8 (change a)
<<<<<<< HEAD
>>>>>>> 970ad7e (more change create file)
Open the  file2   in  a code editor of your pre.
Resolve the conflict by doing the follow:
<<<<<<< HEAD
<<<<<<< HEAD

Merging and conflicts are a common part of the Git experience.
Conflicts in other version control tools like SVN can be costly and time-consuming.
Git makes merging super easy. Most of the time, Git will figure out how to automatically integrate new changes.
=======
=======
Resolve the conflict by doing the following:
=======
<<<<<<< HEAD
Open the  file2   in  a code editor of your name.
=======
Open the  file2   in  a code editor of your pre.
>>>>>>> e84c455 (code change)
=======
>>>>>>> 342c5d8 (change a)
>>>>>>> 128596d (code change)
>>>>>>> 5e797fd (fix conflicts)
<<<<<<< HEAD
=======
=======
Open the  file2   in  a code editor of your pre.
Resolve the conflict by doing the follow:
>>>>>>> 6ce646a (create file code change)
>>>>>>> e3f1306 (create file code change)
=======

Resolve the conflict by doing the following:
>>>>>>> 4528930 (more change create file)
>>>>>>> 970ad7e (more change create file)
=======
>>>>>>> 342c5d8 (change a)
=======


Merging and conflicts are a common part of the Git experience.
Conflicts in other version control tools like SVN can be costly and time-consuming.
Git makes merging super easy. Most of the time, Git will figure out how to automatically integrate old changes.
>>>>>>> 8f3cf58 (change c)
